#!/bin/bash


minishift_version="v3.11.0"
cpus="2"
mem="12"
vm_driver="virtualbox"
profile="istio-tutorial"

# clean up ##################################################################################################################################################################
rm -rf ~/.minishift/
minishift images delete $(minishift images list)
minishift delete -f  --clear-cache
minishift profile delete -f $profile 
rm -rf ~/.minishift
sleep 3
# start minishift
minishift profile set $profile
minishift config set memory $mem"GB"
minishift config set cpus $cpus
minishift config set vm-driver $vm_driver
minishift config set image-caching true
minishift addon enable admin-user
minishift config set openshift-version $minishift_version
minishift addon enable anyuid
minishift start
minishift ssh -- sudo setenforce 0 
sleep 15
echo "loging into minishift"
oc login --insecure-skip-tls-verify $(minishift ip):8443 -u admin -p admin

# install istio ##################################################################################################################################################################
oc apply -f "$1/install/kubernetes/helm/istio/templates/crds.yaml"
sleep 25
oc apply -f "$1/install/kubernetes/istio-demo.yaml"

sleep 120 
oc project istio-system

oc adm policy add-scc-to-user anyuid -z istio-ingress-service-account -n istio-system
oc adm policy add-scc-to-user anyuid -z default -n istio-system
oc adm policy add-scc-to-user anyuid -z prometheus -n istio-system
oc adm policy add-scc-to-user anyuid -z istio-egressgateway-service-account -n istio-system
oc adm policy add-scc-to-user anyuid -z istio-citadel-service-account -n istio-system
oc adm policy add-scc-to-user anyuid -z istio-ingressgateway-service-account -n istio-system
oc adm policy add-scc-to-user anyuid -z istio-cleanup-old-ca-service-account -n istio-system
oc adm policy add-scc-to-user anyuid -z istio-mixer-post-install-account -n istio-system
oc adm policy add-scc-to-user anyuid -z istio-mixer-service-account -n istio-system
oc adm policy add-scc-to-user anyuid -z istio-pilot-service-account -n istio-system
oc adm policy add-scc-to-user anyuid -z istio-sidecar-injector-service-account -n istio-system
oc adm policy add-scc-to-user anyuid -z istio-galley-service-account -n istio-system


oc expose svc istio-ingressgateway
oc expose svc servicegraph
oc expose svc grafana
oc expose svc prometheus
oc expose svc tracing

sleep 15

# deploy bookinfo ##################################################################################################################################################################


oc new-project bookinfo
oc adm policy add-scc-to-user privileged -z default -n bookinfo

oc apply -f <(istioctl kube-inject -f "$1/samples/bookinfo/platform/kube/bookinfo.yaml")
oc apply -f "$1/samples/bookinfo/networking/bookinfo-gateway.yaml"
oc apply -f "$1/samples/bookinfo/networking/destination-rule-all.yaml"


INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
INGRESS_HOST=$(minishift ip)
GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT

echo "INGRESS_PORT:        $INGRESS_PORT"
echo "SECURE_INGRESS_PORT: $SECURE_INGRESS_PORT"
echo -e "INGRESS_HOST:     $INGRESS_HOST\n"
echo "To test run: curl -o /dev/null -s -w '%{http_code}\n' http://${GATEWAY_URL}/productpage"